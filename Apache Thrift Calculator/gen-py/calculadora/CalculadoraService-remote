#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from calculadora import CalculadoraService
from calculadora.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  double sumar(double operando1, double operando2)')
    print('  double restar(double operando1, double operando2)')
    print('  double multiplicar(double operando1, double operando2)')
    print('  double dividir(double operando1, double operando2)')
    print('  double seno(double angulo)')
    print('  double coseno(double angulo)')
    print('  double tangente(double angulo)')
    print('  double gradosARadianes(double grados)')
    print('  double radianesAGrados(double radianes)')
    print('   suma_vectores( vector1,  vector2)')
    print('   resta_vectores( vector1,  vector2)')
    print('  double producto_escalar( vector1,  vector2)')
    print('   producto_vectorial( vector1,  vector2)')
    print('   suma_matrices( matriz1,  matriz2)')
    print('   resta_matrices( matriz1,  matriz2)')
    print('   producto_matricial( matriz1,  matriz2)')
    print('   transpuesta( matriz)')
    print('   inversa( matriz)')
    print('  double determinante( matriz)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = CalculadoraService.Client(protocol)
transport.open()

if cmd == 'sumar':
    if len(args) != 2:
        print('sumar requires 2 args')
        sys.exit(1)
    pp.pprint(client.sumar(eval(args[0]), eval(args[1]),))

elif cmd == 'restar':
    if len(args) != 2:
        print('restar requires 2 args')
        sys.exit(1)
    pp.pprint(client.restar(eval(args[0]), eval(args[1]),))

elif cmd == 'multiplicar':
    if len(args) != 2:
        print('multiplicar requires 2 args')
        sys.exit(1)
    pp.pprint(client.multiplicar(eval(args[0]), eval(args[1]),))

elif cmd == 'dividir':
    if len(args) != 2:
        print('dividir requires 2 args')
        sys.exit(1)
    pp.pprint(client.dividir(eval(args[0]), eval(args[1]),))

elif cmd == 'seno':
    if len(args) != 1:
        print('seno requires 1 args')
        sys.exit(1)
    pp.pprint(client.seno(eval(args[0]),))

elif cmd == 'coseno':
    if len(args) != 1:
        print('coseno requires 1 args')
        sys.exit(1)
    pp.pprint(client.coseno(eval(args[0]),))

elif cmd == 'tangente':
    if len(args) != 1:
        print('tangente requires 1 args')
        sys.exit(1)
    pp.pprint(client.tangente(eval(args[0]),))

elif cmd == 'gradosARadianes':
    if len(args) != 1:
        print('gradosARadianes requires 1 args')
        sys.exit(1)
    pp.pprint(client.gradosARadianes(eval(args[0]),))

elif cmd == 'radianesAGrados':
    if len(args) != 1:
        print('radianesAGrados requires 1 args')
        sys.exit(1)
    pp.pprint(client.radianesAGrados(eval(args[0]),))

elif cmd == 'suma_vectores':
    if len(args) != 2:
        print('suma_vectores requires 2 args')
        sys.exit(1)
    pp.pprint(client.suma_vectores(eval(args[0]), eval(args[1]),))

elif cmd == 'resta_vectores':
    if len(args) != 2:
        print('resta_vectores requires 2 args')
        sys.exit(1)
    pp.pprint(client.resta_vectores(eval(args[0]), eval(args[1]),))

elif cmd == 'producto_escalar':
    if len(args) != 2:
        print('producto_escalar requires 2 args')
        sys.exit(1)
    pp.pprint(client.producto_escalar(eval(args[0]), eval(args[1]),))

elif cmd == 'producto_vectorial':
    if len(args) != 2:
        print('producto_vectorial requires 2 args')
        sys.exit(1)
    pp.pprint(client.producto_vectorial(eval(args[0]), eval(args[1]),))

elif cmd == 'suma_matrices':
    if len(args) != 2:
        print('suma_matrices requires 2 args')
        sys.exit(1)
    pp.pprint(client.suma_matrices(eval(args[0]), eval(args[1]),))

elif cmd == 'resta_matrices':
    if len(args) != 2:
        print('resta_matrices requires 2 args')
        sys.exit(1)
    pp.pprint(client.resta_matrices(eval(args[0]), eval(args[1]),))

elif cmd == 'producto_matricial':
    if len(args) != 2:
        print('producto_matricial requires 2 args')
        sys.exit(1)
    pp.pprint(client.producto_matricial(eval(args[0]), eval(args[1]),))

elif cmd == 'transpuesta':
    if len(args) != 1:
        print('transpuesta requires 1 args')
        sys.exit(1)
    pp.pprint(client.transpuesta(eval(args[0]),))

elif cmd == 'inversa':
    if len(args) != 1:
        print('inversa requires 1 args')
        sys.exit(1)
    pp.pprint(client.inversa(eval(args[0]),))

elif cmd == 'determinante':
    if len(args) != 1:
        print('determinante requires 1 args')
        sys.exit(1)
    pp.pprint(client.determinante(eval(args[0]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
